#!/usr/bin/env python3
"""
Empathetic Code Reviewer - Hackathon Solution
Transforms harsh code review comments into constructive, educational feedback
"""

import json
import sys
import re
from typing import Dict, List, Any
from dataclasses import dataclass
import requests

@dataclass
class ReviewComment:
    original: str
    positive_rephrase: str
    why_explanation: str
    suggested_improvement: str
    resources: List[str]
    severity: str  # 'gentle', 'moderate', 'critical'

class EmpathethicReviewer:
    def __init__(self, use_ollama=True):
        self.use_ollama = use_ollama
        
    def analyze_comment_severity(self, comment: str) -> str:
        """Determine the severity of the original comment for tone adjustment"""
        harsh_words = ['bad', 'wrong', 'terrible', 'awful', 'stupid', 'inefficient']
        moderate_words = ['should', 'could', 'better', 'consider', 'might']
        
        comment_lower = comment.lower()
        
        if any(word in comment_lower for word in harsh_words):
            return 'critical'
        elif any(word in comment_lower for word in moderate_words):
            return 'moderate'
        else:
            return 'gentle'
    
    def call_ollama(self, prompt: str) -> str:
        """Call local Ollama API"""
        try:
            response = requests.post('http://localhost:11434/api/generate',
                json={
                    'model': 'llama3.1:8b',
                    'prompt': prompt,
                    'stream': False
                })
            return response.json()['response']
        except Exception as e:
            print(f"Ollama error: {e}")
            return "Error generating response"
    
    def create_master_prompt(self, code_snippet: str, comments: List[str]) -> str:
        """Create the master prompt that will generate all feedback at once"""
        
        return f"""You are a senior software engineer and mentor with 15+ years of experience. Your job is to transform harsh code review comments into empathetic, educational feedback that helps developers grow.

**CODE BEING REVIEWED:**
```python
{code_snippet}
```

**ORIGINAL HARSH COMMENTS:**
{chr(10).join([f"{i+1}. {comment}" for i, comment in enumerate(comments)])}

**YOUR TASK:**
For EACH original comment, provide a detailed analysis with these exact sections:

### Analysis of Comment: "[EXACT ORIGINAL COMMENT]"

**Positive Rephrasing:** [Rewrite the comment to be encouraging and constructive, acknowledging what the developer did well first]

**The 'Why':** [Explain the underlying software engineering principle - performance, readability, maintainability, security, etc. Be specific about WHY this matters]

**Suggested Improvement:**
```python
[Provide a concrete code example showing the improved version]
```

**Learning Resources:** [Suggest 1-2 specific resources like PEP-8 sections, documentation links, or concept explanations]

---

**TONE GUIDELINES:**
- Always start with something positive
- Use "we" instead of "you" when possible
- Explain the business/technical impact
- Be specific about the improvement, not generic
- Sound like a patient mentor, not a critic

**TECHNICAL ACCURACY:**
- Ensure all code examples are syntactically correct
- Focus on Python best practices
- Consider performance, readability, and maintainability

Now analyze each comment:"""

    def process_review(self, input_data: Dict[str, Any]) -> str:
        """Main processing function"""
        code_snippet = input_data['code_snippet']
        review_comments = input_data['review_comments']
        
        # Create master prompt
        master_prompt = self.create_master_prompt(code_snippet, review_comments)
        
        # Get AI response
        ai_response = self.call_ollama(master_prompt)
        
        # Create final markdown report
        markdown_report = self.create_markdown_report(
            code_snippet, 
            review_comments, 
            ai_response
        )
        
        return markdown_report
    
    def create_markdown_report(self, code_snippet: str, comments: List[str], ai_response: str) -> str:
        """Create the final formatted markdown report"""
        
        report = f"""# ðŸŒŸ Empathetic Code Review Report

## Original Code
```python
{code_snippet}
```

## Constructive Feedback Analysis

{ai_response}

## ðŸ“š Overall Growth Summary

This code shows solid logical thinking! The main opportunities for improvement focus on Python best practices and performance optimization. These suggestions will help make your code more readable, maintainable, and efficient. 

Remember: every senior developer has written similar code early in their journey. The fact that you're seeking feedback shows great growth mindset! ðŸš€

---
*Generated by Empathetic Code Reviewer - Transforming criticism into growth opportunities*
"""
        
        return report

def main():
    if len(sys.argv) != 2:
        print("Usage: python main.py <input.json>")
        sys.exit(1)
    
    # Load input
    with open(sys.argv[1], 'r') as f:
        input_data = json.load(f)
    
    # Create reviewer
    reviewer = EmpathethicReviewer(use_ollama=True)
    
    # Process
    result = reviewer.process_review(input_data)
    
    # Save output
    with open('empathetic_review_report.md', 'w') as f:
        f.write(result)
    
    print("âœ… Empathetic review report generated: empathetic_review_report.md")
    print("\nðŸŽ¯ Key Features Implemented:")
    print("- Contextual tone adjustment")
    print("- Educational explanations")
    print("- Concrete code improvements")
    print("- Learning resource suggestions")
    print("- Encouraging summary")

if __name__ == "__main__":
    main()